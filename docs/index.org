#+TITLE: ManifoldGMM Documentation
#+AUTHOR: Ethan Ligon
#+OPTIONS: toc:nil num:nil

* Overview
This directory contains all design notes, standards, and examples for the
=ManifoldGMM= project — a Python package for Generalized Method of Moments
estimation on Riemannian manifolds.

The documentation is written in **Emacs Org-mode** for readability, reproducibility,
and compatibility with GitHub rendering.  Files can be exported to Markdown or HTML
if needed.

* Directory Structure
#+begin_example
docs/
  index.org               ← This file
  standards/              ← Core conventions and rules
  design/                 ← Architectural and algorithmic notes
  howto/                  ← Practical conversion guides and playbooks
  examples/               ← Reproducible examples and walkthroughs
  automation/             ← Agent status logs and automation playbooks
#+end_example

* Key Documents
| Section                        | File                                        | Description                                              |
|--------------------------------+---------------------------------------------+----------------------------------------------------------|
| Naming & Notation Standards    | [[file:standards/naming_notation.org][standards/naming_notation.org]]               | Canonical symbols, function naming, and API conventions  |
| Architecture                   | [[file:design/architecture.org][design/architecture.org]]                     | High-level overview of module layout and dependencies    |
| Autodiff & Jacobians           | [[file:design/autodiff.org][design/autodiff.org]]                         | Notes on Jacobian computation and projections            |
| GMM Inference                  | [[file:design/gmm_inference.org][design/gmm_inference.org]]                    | Tangent-space covariance, delta method, test statistics  |
| Numerics                       | [[file:design/numerics.org][design/numerics.org]]                         | Conditioning, tolerances, retractions, projections       |
| Feature Requests               | [[file:design/feature_requests.org][design/feature_requests.org]]                 | Planned enhancements and open ideas                      |
| Translating DataMat Moments    | [[file:howto/datamat_to_jax.org][howto/datamat_to_jax.org]]                    | Manual recipe for building a JAX twin                    |
| Collaboration Preferences      | [[file:howto/collaboration_preferences.org][howto/collaboration_preferences.org]]      | Ethan’s working style and tooling expectations           |
| Org Examples Style Guide       | [[file:howto/org_example_style.org][howto/org_example_style.org]]                  | Conventions for runnable, tangled Org examples           |
| Examples                       | [[file:examples/psd_fixed_rank.org][examples/psd_fixed_rank.org]]                 | Worked examples (low-rank PSD, Stiefel regression, etc.) |
| Gaussian Location & Covariance | [[file:examples/gaussian_location_covariance.org][examples/gaussian_location_covariance.org]]   | Product-manifold GMM setup for (μ, Σ)                    |
| ManifoldPoint Intro            | [[file:examples/manifold_point_getting_started.org][examples/manifold_point_getting_started.org]] | Getting started with manifold points and Jacobians       |
| Automation Log Template        | [[file:automation/sample_status_log.org][automation/sample_status_log.org]]            | Sample agent status log and checklist                    |

* Standards and Versioning
All documentation and source code must adhere to the
[[file:standards/naming_notation.org][Naming & Notation Standards]].
That document defines the canonical mapping between mathematical notation
(θ, T_θM, Retr, Π) and API identifiers (=ManifoldPoint=, =TangentSpace=, =retract=, =proj=).

The current standards version is *v0.1*.

* Adding New Documentation
1. Write new Org files under =docs/design/=, =docs/examples/=, or =docs/automation/= as appropriate.
2. Add a short entry to this index under the relevant section.
3. Ensure all cross-links are relative and Org-compatible.
4. Include author, date, and version headers where possible.

* Exporting
You can export any Org document to Markdown (for PyPI, Sphinx, etc.) using:
#+begin_src bash
emacs --batch -l org --eval '(org-md-export-to-markdown)'
#+end_src

* License
All documentation in this directory is released under the
[[file:../LICENSE.org][Creative Commons Attribution–NonCommercial–ShareAlike 4.0 International License (CC BY-NC-SA 4.0)]].
