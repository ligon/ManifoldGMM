#+TITLE: Agent Status Log
#+AUTHOR: ManifoldGMM Automation
#+OPTIONS: toc:nil num:nil

* Session Summary
- Date: <2025-10-31 Fri>
- Agent: Assistant (Codex CLI)
- Focus: Stabilise circle example input reshape.

* Notes
1. Created =bot/circle= branch from =circle= and corrected the =dm.concat= call in =docs/examples/my_circle.org= to stack cosine/sine columns with =axis=1= and =levelnames=True=.
2. Regenerated the tangled =docs/examples/my_circle.py= snippet with the same concatenation logic to keep the example executable.
3. Re-ran =poetry run python docs/examples/my_circle.py=; the previous shape mismatch is resolved, though the script now stops on an unrelated =ambient_cov.dg()= attribute error.

* Recommended Follow-ups
- Decide whether to expose covariance helpers returning DataMat instances or adjust the example to index numpy arrays directly before publishing.

* Session Summary
- Date: <2025-10-31 Fri>
- Agent: Assistant (Codex CLI)
- Focus: Return labelled covariances and update examples/tests.

* Notes
1. Changed =GMMResult.tangent_covariance= and =manifold_covariance= to return =DataMat= objects with basis/parameter labels, ensuring downstream examples can call =dg()= without attribute errors.
2. Updated circle and Gaussian Org examples (and tangled python) to reuse the new DataMat outputs for standard errors and confidence intervals.
3. Adjusted the Circle example test to convert covariances via =to_numpy= and =dg()= before assertions; reformatted the modified module and re-ran =poetry run make quick-check= (lint/black/mypy/pytest all clean).

* Recommended Follow-ups
- Consider enriching covariance return types with metadata about the chosen tangent basis for richer reporting.

* Session Summary
- Date: <2025-11-01 Sat>
- Agent: Assistant (Codex CLI)
- Focus: Enable lazy metadata for JAX restrictions.

* Notes
1. Added deferred metadata population in =MomentRestriction= so the JAX backend records the last evaluation and can synthesise parameter/moment metadata on-demand, sampling a manifold random point when necessary.
2. Updated related properties to trigger the lazy probe, raising an informative error when no manifold random point is available and no prior evaluation has occurred.
3. Extended the JAX moment restriction tests to cover both random-point probing and the post-evaluation path; quick-check (ruff/black/mypy/pytest) passes.

* Session Summary
- Date: <2025-11-01 Sat>
- Agent: Assistant (Codex CLI)
- Focus: Provide labelled parameter views on GMM results.

* Notes
1. Introduced =GMMResult.theta_labeled= as a lazily computed view that formats optimiser outputs via =MomentRestriction.format_parameter= without disturbing downstream autodiff workflows.
2. Enhanced circle/Gaussian examples and tests to lean on the new accessor, verifying it yields =DataVec= objects when labels are supplied.
3. Tightened =MomentRestriction.format_parameter= to support DataVec/DataMat reconstructions while preserving tuple outputs for product manifolds; quick-check remains green.

* Session Summary
- Date: <2025-11-01 Sat>
- Agent: Assistant (Codex CLI)
- Focus: Make =theta= itself user-facing while keeping raw arrays for numerics.

* Notes
1. Hid the optimiser output behind =GMMResult.theta_array= and surfaced =theta= as the formatted DataVec/DataMat view; internal routines continue to consume the raw array.
2. Updated numeric paths and example/tests to rely on =theta_array= or labelled values appropriately; ensured covariances already emit =DataMat= with labels.
3. Re-confirmed lint/type/test suite via =poetry run make quick-check=.

* Session Summary
- Date: <2025-11-01 Sat>
- Agent: Assistant (Codex CLI)
- Focus: Refresh circle example after lint.

* Notes
1. Removed an unused =DataMat= import from =docs/examples/my_circle.py= (and org source) flagged by =ruff=.
2. Re-ran =poetry run make quick-check= to ensure lint, format, type checks, and tests stay green.

* Recommended Follow-ups
- Consider allowing callers to supply an explicit probe θ during construction to avoid relying on manifold.random_point() for fragile models.

* Session Summary
- Date: <2025-11-01 Sat>
- Agent: Assistant (Codex CLI)
- Focus: Add verbose flag passthrough for GMM estimation.

* Notes
1. Extended =GMM.estimate()= with a =verbose= flag that maps to the optimizer's =verbosity= parameter, supporting both class-based and preconfigured optimizer instances.
2. Relaxed optimizer resolution so preconfigured instances accept verbosity updates without raising errors.
3. Added unit tests covering the new flag for both optimizer construction paths; =poetry run make quick-check= remains green.

* Recommended Follow-ups
- Consider exposing a =log_verbose= toggle mirroring pymanopt's =log_verbosity= for deeper debugging when desired.

* Session Summary
- Date: <2025-10-31 Fri>
- Agent: Assistant (Codex CLI)
- Focus: Provision Poetry tooling, add automation target, verify quick-check.

* Notes
1. Installed Poetry via =pipx=, configured =poetry.toml= for in-project virtualenvs, and populated =.venv= with dev dependencies using =poetry install --with dev=.
2. Added a =poetry-venv= Makefile target (lines 25-58) that enforces in-project virtualenvs and reinstalls dependencies with the dev group on demand.
3. Ran =poetry run make quick-check= to confirm =ruff=, =black=, =mypy=, and =pytest -m "not slow"= all succeed in the freshly provisioned environment.

* Recommended Follow-ups
- Stage and commit the Makefile and Poetry configuration changes with appropriate attribution.
- Consider documenting the =poetry-venv= workflow in =README.org= or the contributor guide for future agents.

* Session Summary
- Date: <2025-10-31 Fri>
- Agent: Assistant (Codex CLI)
- Focus: Require JAX at runtime and align dependent tests.

* Notes
1. Removed optional JAX guards in =src/manifoldgmm/econometrics/moment_restriction.py= and =src/manifoldgmm/econometrics/gmm.py= so backend helpers operate on real JAX arrays.
2. Updated JAX-dependent tests to import the library directly, dropping =pytest.importorskip= and skip markers now that the dependency is mandatory.
3. Ran =poetry run make quick-check= to confirm lint, formatting, mypy, and pytest all pass with the stricter requirement.

* Recommended Follow-ups
- Add a README/installation note clarifying that JAX is now required outside the optional extras.

* Session Summary
- Date: <2025-10-27 Mon>
- Agent: Codex (GPT-5)
- Focus: Streamline quick-check workflow and document heavier tests.

* Notes
1. Updated =Makefile= so =quick-check= runs unit tests excluding =@pytest.mark.slow= cases and added a dedicated =slow-tests= target.
2. Tagged =tests/econometrics/test_gaussian_example.py= with the =slow= marker and registered it in =pyproject.toml=.
3. Confirmed =make quick-check= succeeds, recorded that =tests/econometrics/test_gaussian_example.py= takes ≈11.7s via =pytest --durations=10=, and created this log entry to track the session.
4. Pinned =datamat= to =0.2.0a1= and added a convenience target (=make use-local-datamat=) for opting into an editable local install during development.

* Recommended Follow-ups
- Evaluate whether other tests should receive the =slow= marker as the suite grows.
- Decide if status logs should be rotated per release or maintained cumulatively.

* Session Summary
- Date: <2025-10-27 Mon>
- Agent: Codex (GPT-5)
- Focus: Finalise tangent/inference utilities and dependency hygiene.

* Notes
1. Introduced Jacobian and covariance helpers on =GMMResult=, including ridge-stabilised inversion utilities.
2. Added circle-mean regression/Org example, verified tangent vs ambient covariance consistency, and wrote persistence helpers for pickling results.
3. Updated documentation index/readme to reference new examples and clarified collaboration preferences about Org formatting.
4. Regenerated dependencies to include =cloudpickle= (used for robust pickle support) while removing the non-installable emacs placeholder.

* Recommended Follow-ups
- Expose convenience accessors for standard errors and Wald-style tests now that covariances are available.
- Document a pattern for constrained GMM fits to enable LR-style tests in future work.
